frequency = reconvictions/reconvicted, #not used here
pop_str = offenders/convicted_population
) %>%
filter(year %in% 2004:2007)
tmpdf=reconv
tmpdf$pop=tmpdf$year
factrs = c("prevalence","pop_str")
id_vars=NULL
id_vars = c("Age","Sex")
ratefunction ="prevalence*pop_str"
baseline=NULL
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
crude_rates <-
reconv %>%
mutate(rate=prevalence*pop_str*frequency) %>%
group_by(year) %>%
summarise(
rate=sum(rate),
factor="crude"
)
source("R/DasGupt_table.R")
source("R/DasGupt_rates.R")
dgnpop(reconv,year,prevalence,pop_str,id_vars=c(Age,Sex))
reconv
dgnpop(reconv,year,prevalence,pop_str,id_vars=c(Age,Sex))
library(tidyverse)
load("data/reconv.RData")
reconv <-
reconv %>%
mutate(
prevalence = reconvicted/offenders,
frequency = reconvictions/reconvicted, #not used here
pop_str = offenders/convicted_population
) %>%
filter(year %in% 2004:2007)
tmpdf=reconv
tmpdf$pop=tmpdf$year
factrs = c("prevalence","pop_str")
id_vars=NULL
id_vars = c("Age","Sex")
ratefunction ="prevalence*pop_str"
baseline=NULL
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
#sapply(list.files("R",full.names=T)[c(4,7,8,9,10,11)], function(x) source(x))
dgnpop(reconv,year,prevalence,pop_str,id_vars=c(Age,Sex))
library(tidyverse)
load("data/reconv.RData")
reconv <-
reconv %>%
mutate(
prevalence = reconvicted/offenders,
frequency = reconvictions/reconvicted, #not used here
pop_str = offenders/convicted_population
) %>%
filter(year %in% 2004:2007)
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,year,prevalence,pop_str,id_vars=c(Age,Sex))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
reconv
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c("Age","Sex"))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(reconv,pop=year,prevalence,pop_str,id_vars=c("Age","Sex"))
reconv %>% filter(year %in% c(2004,2007)) %>%
dgnpop(.,pop=year,prevalence,pop_str,id_vars=c("Age","Sex"))
reconv %>% filter(year %in% c(2004,2007)) %>%
dgnpop(df=., pop=year,prevalence,pop_str,id_vars=c("Age","Sex"))
dd <- reconv %>% filter(year %in% c(2004,2007))
dgnpop(dd, pop=year,prevalence,pop_str,id_vars=c("Age","Sex"))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dd <- reconv %>% filter(year %in% c(2004,2007))
dgnpop(dd, pop=year,prevalence,pop_str,id_vars=c("Age","Sex"))
tempdf=dd
tmpdf=dd
tmpdf$pop=tmpdf$year
allpops = unique(tmpdf$pop)
tmpdf$subpop = gsub(" ","",apply(tmpdf[,id_vars], 1, function(x) paste0(x, collapse="")))
id_vars=c("Age","Sex")
##########
#THE DAS GUPTA METHOD
##########
tmpdf$subpop = gsub(" ","",apply(tmpdf[,id_vars], 1, function(x) paste0(x, collapse="")))
dgo = list()
for(g in unique(tmpdf$subpop)){
tmpdf2 = tmpdf[tmpdf$subpop==g, ]
if(length(allpops)<=2){
# ONLY 2 populations, use dg2pop directly.
DG_OUT = dg2pop(tmpdf2,factrs, ratefunction)
} else {
##### N population standardisation
print("Standardising and decomposing for all pairwise comparisons...")
pairwise_pops = combn(as.character(allpops), 2)
pairwise_est = apply(pairwise_pops, 2, function(x)
dplyr::filter(tmpdf2, pop %in% x) %>%
mutate(pop = factor(pop, levels=x,ordered=T)))
dg2p_res2 = lapply(pairwise_est, function(x) dg2pop(x, factrs, ratefunction))
dg2p_res2 = lapply(dg2p_res2, function(x) unlist(x, recursive = F))
dg2p_res2 = enframe(unlist(dg2p_res2))
DG_OUT = list()
for(f in factrs){
dg2p_rates2 = dg2p_res2[grepl(f,dg2p_res2$name) & !grepl(".diff_",dg2p_res2$name), ]
dg2p_rates2 = dg2p_rates2[!duplicated(dg2p_rates2),]
dg2p_facteffs2 = dg2p_res2[grepl(paste0(f,".diff"),dg2p_res2$name), ]
if(!is.null(baseline)){
standardized_rates2 = dg2p_rates2[grepl(paste0(".adj",baseline), dg2p_rates2$name),]
difference_effects2 = dg2p_facteffs2[grepl(paste0(".diff_",baseline), dg2p_facteffs2$name),]
} else {
#std_rates
print(paste0("Standardizing P-",f," across N pops..."))
#these are the standardized rate for factor f in each year, stnadardixed over all Ys.
standardized_rates = lapply(allpops, function(x) dg611(dg2p_rates2, allpops, as.character(x),f))
standardized_rates = enframe(unlist(standardized_rates))
print(paste0("Getting decomposition effects for P-",f," standardised rates..."))
pairwise_pops = combn(allpops, 2, simplify = F)
difference_effects = lapply(pairwise_pops, function(x) dg612(dg2p_facteffs2, allpops, x, f))
difference_effects = enframe(unlist(difference_effects))
}
DG_OUT[[f]]=bind_rows(standardized_rates,difference_effects)
}
}
dgo[[g]]=DG_OUT
}
factrs=c("prevalence","pop_str")
dgo = list()
for(g in unique(tmpdf$subpop)){
tmpdf2 = tmpdf[tmpdf$subpop==g, ]
if(length(allpops)<=2){
# ONLY 2 populations, use dg2pop directly.
DG_OUT = dg2pop(tmpdf2,factrs, ratefunction)
} else {
##### N population standardisation
print("Standardising and decomposing for all pairwise comparisons...")
pairwise_pops = combn(as.character(allpops), 2)
pairwise_est = apply(pairwise_pops, 2, function(x)
dplyr::filter(tmpdf2, pop %in% x) %>%
mutate(pop = factor(pop, levels=x,ordered=T)))
dg2p_res2 = lapply(pairwise_est, function(x) dg2pop(x, factrs, ratefunction))
dg2p_res2 = lapply(dg2p_res2, function(x) unlist(x, recursive = F))
dg2p_res2 = enframe(unlist(dg2p_res2))
DG_OUT = list()
for(f in factrs){
dg2p_rates2 = dg2p_res2[grepl(f,dg2p_res2$name) & !grepl(".diff_",dg2p_res2$name), ]
dg2p_rates2 = dg2p_rates2[!duplicated(dg2p_rates2),]
dg2p_facteffs2 = dg2p_res2[grepl(paste0(f,".diff"),dg2p_res2$name), ]
if(!is.null(baseline)){
standardized_rates2 = dg2p_rates2[grepl(paste0(".adj",baseline), dg2p_rates2$name),]
difference_effects2 = dg2p_facteffs2[grepl(paste0(".diff_",baseline), dg2p_facteffs2$name),]
} else {
#std_rates
print(paste0("Standardizing P-",f," across N pops..."))
#these are the standardized rate for factor f in each year, stnadardixed over all Ys.
standardized_rates = lapply(allpops, function(x) dg611(dg2p_rates2, allpops, as.character(x),f))
standardized_rates = enframe(unlist(standardized_rates))
print(paste0("Getting decomposition effects for P-",f," standardised rates..."))
pairwise_pops = combn(allpops, 2, simplify = F)
difference_effects = lapply(pairwise_pops, function(x) dg612(dg2p_facteffs2, allpops, x, f))
difference_effects = enframe(unlist(difference_effects))
}
DG_OUT[[f]]=bind_rows(standardized_rates,difference_effects)
}
}
dgo[[g]]=DG_OUT
}
ratefunction=NULL
baseline=NULL
dgo = list()
for(g in unique(tmpdf$subpop)){
tmpdf2 = tmpdf[tmpdf$subpop==g, ]
if(length(allpops)<=2){
# ONLY 2 populations, use dg2pop directly.
DG_OUT = dg2pop(tmpdf2,factrs, ratefunction)
} else {
##### N population standardisation
print("Standardising and decomposing for all pairwise comparisons...")
pairwise_pops = combn(as.character(allpops), 2)
pairwise_est = apply(pairwise_pops, 2, function(x)
dplyr::filter(tmpdf2, pop %in% x) %>%
mutate(pop = factor(pop, levels=x,ordered=T)))
dg2p_res2 = lapply(pairwise_est, function(x) dg2pop(x, factrs, ratefunction))
dg2p_res2 = lapply(dg2p_res2, function(x) unlist(x, recursive = F))
dg2p_res2 = enframe(unlist(dg2p_res2))
DG_OUT = list()
for(f in factrs){
dg2p_rates2 = dg2p_res2[grepl(f,dg2p_res2$name) & !grepl(".diff_",dg2p_res2$name), ]
dg2p_rates2 = dg2p_rates2[!duplicated(dg2p_rates2),]
dg2p_facteffs2 = dg2p_res2[grepl(paste0(f,".diff"),dg2p_res2$name), ]
if(!is.null(baseline)){
standardized_rates2 = dg2p_rates2[grepl(paste0(".adj",baseline), dg2p_rates2$name),]
difference_effects2 = dg2p_facteffs2[grepl(paste0(".diff_",baseline), dg2p_facteffs2$name),]
} else {
#std_rates
print(paste0("Standardizing P-",f," across N pops..."))
#these are the standardized rate for factor f in each year, stnadardixed over all Ys.
standardized_rates = lapply(allpops, function(x) dg611(dg2p_rates2, allpops, as.character(x),f))
standardized_rates = enframe(unlist(standardized_rates))
print(paste0("Getting decomposition effects for P-",f," standardised rates..."))
pairwise_pops = combn(allpops, 2, simplify = F)
difference_effects = lapply(pairwise_pops, function(x) dg612(dg2p_facteffs2, allpops, x, f))
difference_effects = enframe(unlist(difference_effects))
}
DG_OUT[[f]]=bind_rows(standardized_rates,difference_effects)
}
}
dgo[[g]]=DG_OUT
}
allpops = unique(tmpdf$pop)
##########
#THE DAS GUPTA METHOD
##########
tmpdf$subpop = gsub(" ","",apply(tmpdf[,id_vars], 1, function(x) paste0(x, collapse="")))
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dd <- reconv %>% filter(year %in% c(2004,2007))
tmpdf=dd
tmpdf$pop=factor(tmpdf$year)
id_vars=c("Age","Sex")
factrs=c("prevalence","pop_str")
ratefunction=NULL
baseline=NULL
allpops = unique(tmpdf$pop)
##########
#THE DAS GUPTA METHOD
##########
tmpdf$subpop = gsub(" ","",apply(tmpdf[,id_vars], 1, function(x) paste0(x, collapse="")))
dgo = list()
for(g in unique(tmpdf$subpop)){
tmpdf2 = tmpdf[tmpdf$subpop==g, ]
if(length(allpops)<=2){
# ONLY 2 populations, use dg2pop directly.
DG_OUT = dg2pop(tmpdf2,factrs, ratefunction)
} else {
##### N population standardisation
print("Standardising and decomposing for all pairwise comparisons...")
pairwise_pops = combn(as.character(allpops), 2)
pairwise_est = apply(pairwise_pops, 2, function(x)
dplyr::filter(tmpdf2, pop %in% x) %>%
mutate(pop = factor(pop, levels=x,ordered=T)))
dg2p_res2 = lapply(pairwise_est, function(x) dg2pop(x, factrs, ratefunction))
dg2p_res2 = lapply(dg2p_res2, function(x) unlist(x, recursive = F))
dg2p_res2 = enframe(unlist(dg2p_res2))
DG_OUT = list()
for(f in factrs){
dg2p_rates2 = dg2p_res2[grepl(f,dg2p_res2$name) & !grepl(".diff_",dg2p_res2$name), ]
dg2p_rates2 = dg2p_rates2[!duplicated(dg2p_rates2),]
dg2p_facteffs2 = dg2p_res2[grepl(paste0(f,".diff"),dg2p_res2$name), ]
if(!is.null(baseline)){
standardized_rates2 = dg2p_rates2[grepl(paste0(".adj",baseline), dg2p_rates2$name),]
difference_effects2 = dg2p_facteffs2[grepl(paste0(".diff_",baseline), dg2p_facteffs2$name),]
} else {
#std_rates
print(paste0("Standardizing P-",f," across N pops..."))
#these are the standardized rate for factor f in each year, stnadardixed over all Ys.
standardized_rates = lapply(allpops, function(x) dg611(dg2p_rates2, allpops, as.character(x),f))
standardized_rates = enframe(unlist(standardized_rates))
print(paste0("Getting decomposition effects for P-",f," standardised rates..."))
pairwise_pops = combn(allpops, 2, simplify = F)
difference_effects = lapply(pairwise_pops, function(x) dg612(dg2p_facteffs2, allpops, x, f))
difference_effects = enframe(unlist(difference_effects))
}
DG_OUT[[f]]=bind_rows(standardized_rates,difference_effects)
}
}
dgo[[g]]=DG_OUT
}
enframe(unlist(dgo,recursive = F)) %>% unnest(value, names_repair = "universal")
enframe(unlist(dgo,recursive = F)) %>% unnest(value, names_repair = "unique")
enframe(unlist(dgo,recursive = F)) %>% unnest(value, names_repair = "unique") %>%
separate(1, into=c("subpop","factor"),"\\.",fill = "right")
dgo
enframe(unlist(dgo,recursive = F)) %>% unnest(value, names_repair = "unique") %>%
separate(1, into=c("subpop","factor"),"\\.",fill = "right")
dd <- reconv %>% filter(year %in% c(2004:2007))
tmpdf=dd
tmpdf$pop=factor(tmpdf$year)
id_vars=c("Age","Sex")
factrs=c("prevalence","pop_str")
ratefunction=NULL
baseline=NULL
allpops = unique(tmpdf$pop)
##########
#THE DAS GUPTA METHOD
##########
tmpdf$subpop = gsub(" ","",apply(tmpdf[,id_vars], 1, function(x) paste0(x, collapse="")))
dgo = list()
for(g in unique(tmpdf$subpop)){
tmpdf2 = tmpdf[tmpdf$subpop==g, ]
if(length(allpops)<=2){
# ONLY 2 populations, use dg2pop directly.
DG_OUT = dg2pop(tmpdf2,factrs, ratefunction)
} else {
##### N population standardisation
print("Standardising and decomposing for all pairwise comparisons...")
pairwise_pops = combn(as.character(allpops), 2)
pairwise_est = apply(pairwise_pops, 2, function(x)
dplyr::filter(tmpdf2, pop %in% x) %>%
mutate(pop = factor(pop, levels=x,ordered=T)))
dg2p_res2 = lapply(pairwise_est, function(x) dg2pop(x, factrs, ratefunction))
dg2p_res2 = lapply(dg2p_res2, function(x) unlist(x, recursive = F))
dg2p_res2 = enframe(unlist(dg2p_res2))
DG_OUT = list()
for(f in factrs){
dg2p_rates2 = dg2p_res2[grepl(f,dg2p_res2$name) & !grepl(".diff_",dg2p_res2$name), ]
dg2p_rates2 = dg2p_rates2[!duplicated(dg2p_rates2),]
dg2p_facteffs2 = dg2p_res2[grepl(paste0(f,".diff"),dg2p_res2$name), ]
if(!is.null(baseline)){
standardized_rates2 = dg2p_rates2[grepl(paste0(".adj",baseline), dg2p_rates2$name),]
difference_effects2 = dg2p_facteffs2[grepl(paste0(".diff_",baseline), dg2p_facteffs2$name),]
} else {
#std_rates
print(paste0("Standardizing P-",f," across N pops..."))
#these are the standardized rate for factor f in each year, stnadardixed over all Ys.
standardized_rates = lapply(allpops, function(x) dg611(dg2p_rates2, allpops, as.character(x),f))
standardized_rates = enframe(unlist(standardized_rates))
print(paste0("Getting decomposition effects for P-",f," standardised rates..."))
pairwise_pops = combn(allpops, 2, simplify = F)
difference_effects = lapply(pairwise_pops, function(x) dg612(dg2p_facteffs2, allpops, x, f))
difference_effects = enframe(unlist(difference_effects))
}
DG_OUT[[f]]=bind_rows(standardized_rates,difference_effects)
}
}
dgo[[g]]=DG_OUT
}
enframe(unlist(dgo,recursive = F)) %>% unnest(value, names_repair = "unique") %>%
separate(1, into=c("subpop","factor"),"\\.",fill = "right")
dgo %>%
separate(name...2, into=c("ff","pop","ff2"), "\\.") %>%
select(-ff,-ff2) %>%
pivot_wider(names_from="pop",values_from="value") %>%
arrange(factor)
dgo = enframe(unlist(dgo,recursive = F)) %>% unnest(value, names_repair = "unique") %>%
separate(1, into=c("subpop","factor"),"\\.",fill = "right")
dgo %>%
separate(name...2, into=c("ff","pop","ff2"), "\\.") %>%
select(-ff,-ff2) %>%
pivot_wider(names_from="pop",values_from="value") %>%
arrange(factor)
library(tidyverse)
load("data/reconv.RData")
reconv <-
reconv %>%
mutate(
prevalence = reconvicted/offenders,
frequency = reconvictions/reconvicted, #not used here
pop_str = offenders/convicted_population
) %>%
filter(year %in% 2004:2007)
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dd <- reconv %>% filter(year %in% c(2004:2007))
dgnpop(dd, pop=year,prevalence,pop_str,id_vars=c("Age","Sex"))
c(1,2,4) %in% 1
1 %in% c(1,2,4)
library(tidyverse)
load("data/reconv.RData")
reconv <-
reconv %>%
mutate(
prevalence = reconvicted/offenders,
frequency = reconvictions/reconvicted, #not used here
pop_str = offenders/convicted_population
) %>%
filter(year %in% 2004:2007)
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dd <- reconv %>% filter(year %in% c(2004:2007))
dgnpop(dd, pop=year,prevalence,pop_str,id_vars=c("Age","Sex"))
dd <- reconv %>% filter(year %in% c(2004,2007))
dgnpop(dd, pop=year,prevalence,pop_str,id_vars=c("Age","Sex"))
dgnpop(dd, pop=year,prevalence,pop_str)
tmpdf=dd
tmpdf$pop=factor(tmpdf$year)
id_vars=c("Age","Sex")
factrs=c("prevalence","pop_str")
ratefunction=NULL
baseline=NULL
allpops = unique(tmpdf$pop)
##########
#THE DAS GUPTA METHOD
##########
tmpdf$subpop = gsub(" ","",apply(tmpdf[,id_vars], 1, function(x) paste0(x, collapse="")))
dgo = list()
for(g in unique(tmpdf$subpop)){
tmpdf2 = tmpdf[tmpdf$subpop==g, ]
if(length(allpops)<=2){
# ONLY 2 populations, use dg2pop directly.
DG_OUT = dg2pop(tmpdf2,factrs, ratefunction)
} else {
##### N population standardisation
print("Standardising and decomposing for all pairwise comparisons...")
pairwise_pops = combn(as.character(allpops), 2)
pairwise_est = apply(pairwise_pops, 2, function(x)
dplyr::filter(tmpdf2, pop %in% x) %>%
mutate(pop = factor(pop, levels=x,ordered=T)))
dg2p_res2 = lapply(pairwise_est, function(x) dg2pop(x, factrs, ratefunction))
dg2p_res2 = lapply(dg2p_res2, function(x) unlist(x, recursive = F))
dg2p_res2 = enframe(unlist(dg2p_res2))
DG_OUT = list()
for(f in factrs){
dg2p_rates2 = dg2p_res2[grepl(f,dg2p_res2$name) & !grepl(".diff_",dg2p_res2$name), ]
dg2p_rates2 = dg2p_rates2[!duplicated(dg2p_rates2),]
dg2p_facteffs2 = dg2p_res2[grepl(paste0(f,".diff"),dg2p_res2$name), ]
if(!is.null(baseline)){
standardized_rates2 = dg2p_rates2[grepl(paste0(".adj",baseline), dg2p_rates2$name),]
difference_effects2 = dg2p_facteffs2[grepl(paste0(".diff_",baseline), dg2p_facteffs2$name),]
} else {
#std_rates
print(paste0("Standardizing P-",f," across N pops..."))
#these are the standardized rate for factor f in each year, stnadardixed over all Ys.
standardized_rates = lapply(allpops, function(x) dg611(dg2p_rates2, allpops, as.character(x),f))
standardized_rates = enframe(unlist(standardized_rates))
print(paste0("Getting decomposition effects for P-",f," standardised rates..."))
pairwise_pops = combn(allpops, 2, simplify = F)
difference_effects = lapply(pairwise_pops, function(x) dg612(dg2p_facteffs2, allpops, x, f))
difference_effects = enframe(unlist(difference_effects))
}
DG_OUT[[f]]=bind_rows(standardized_rates,difference_effects)
}
}
dgo[[g]]=DG_OUT
}
enframe(unlist(dgo,recursive = F)) %>% unnest(value, names_repair = "universal")
id_vars=NULL
tmpdf$subpop = gsub(" ","",apply(tmpdf[,id_vars], 1, function(x) paste0(x, collapse="")))
dgo = list()
for(g in unique(tmpdf$subpop)){
tmpdf2 = tmpdf[tmpdf$subpop==g, ]
if(length(allpops)<=2){
# ONLY 2 populations, use dg2pop directly.
DG_OUT = dg2pop(tmpdf2,factrs, ratefunction)
} else {
##### N population standardisation
print("Standardising and decomposing for all pairwise comparisons...")
pairwise_pops = combn(as.character(allpops), 2)
pairwise_est = apply(pairwise_pops, 2, function(x)
dplyr::filter(tmpdf2, pop %in% x) %>%
mutate(pop = factor(pop, levels=x,ordered=T)))
dg2p_res2 = lapply(pairwise_est, function(x) dg2pop(x, factrs, ratefunction))
dg2p_res2 = lapply(dg2p_res2, function(x) unlist(x, recursive = F))
dg2p_res2 = enframe(unlist(dg2p_res2))
DG_OUT = list()
for(f in factrs){
dg2p_rates2 = dg2p_res2[grepl(f,dg2p_res2$name) & !grepl(".diff_",dg2p_res2$name), ]
dg2p_rates2 = dg2p_rates2[!duplicated(dg2p_rates2),]
dg2p_facteffs2 = dg2p_res2[grepl(paste0(f,".diff"),dg2p_res2$name), ]
if(!is.null(baseline)){
standardized_rates2 = dg2p_rates2[grepl(paste0(".adj",baseline), dg2p_rates2$name),]
difference_effects2 = dg2p_facteffs2[grepl(paste0(".diff_",baseline), dg2p_facteffs2$name),]
} else {
#std_rates
print(paste0("Standardizing P-",f," across N pops..."))
#these are the standardized rate for factor f in each year, stnadardixed over all Ys.
standardized_rates = lapply(allpops, function(x) dg611(dg2p_rates2, allpops, as.character(x),f))
standardized_rates = enframe(unlist(standardized_rates))
print(paste0("Getting decomposition effects for P-",f," standardised rates..."))
pairwise_pops = combn(allpops, 2, simplify = F)
difference_effects = lapply(pairwise_pops, function(x) dg612(dg2p_facteffs2, allpops, x, f))
difference_effects = enframe(unlist(difference_effects))
}
DG_OUT[[f]]=bind_rows(standardized_rates,difference_effects)
}
}
dgo[[g]]=DG_OUT
}
enframe(unlist(dgo,recursive = F)) %>% unnest(value, names_repair = "universal")
library(tidyverse)
load("data/reconv.RData")
reconv <-
reconv %>%
mutate(
prevalence = reconvicted/offenders,
frequency = reconvictions/reconvicted, #not used here
pop_str = offenders/convicted_population
) %>%
filter(year %in% 2004:2007)
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dd <- reconv %>% filter(year %in% c(2004,2007))
dgnpop(dd, pop=year,prevalence,pop_str)
dd <- reconv %>% filter(year %in% c(2004,2007))
dgnpop(dd, pop=year,prevalence,pop_str,id_vars=c("Age","Sex"))
dd <- reconv %>% filter(year %in% c(2004,2007))
dgnpop(dd, pop=year,prevalence,pop_str)
dd <- reconv %>% filter(year %in% c(2004:2007))
dgnpop(dd, pop=year,prevalence,pop_str)
sapply(list.files("R/v2/",full.names=T)[c(1,2,3,4,5)], function(x) source(x))
dgnpop(dd, pop=year,prevalence,pop_str)
reconv %>% filter(year %in% c(2004:2007))
dd <- reconv %>% filter(year %in% c(2004:2007), Age=="21 to 25", Sex="Female")
dgnpop(dd, pop=year,prevalence,pop_str)
dd <- reconv %>% filter(year %in% c(2004:2007), Age=="21 to 25", Sex=="Female")
dgnpop(dd, pop=year,prevalence,pop_str)
