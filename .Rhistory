for(f in factrs){
DG_OUT[[f]]=bind_cols(
select(dg2p_res[[f]],starts_with("pop")),
select(dg2p_res[[f]],starts_with("diff"))
)
}
}
return(dg2p_res)
if(!missing(id_vars)){
id_vars=enquo(id_vars)
map(DG_OUT, ~bind_cols(df %>% select(!!id_vars) %>% distinct,.)) %>%
map2_dfr(.,names(.),~mutate(.x,factor=.y))
}else{return(DG_OUT)}
}
#' Das Gupta equation 6.11: Standardises rates across populations
#' Outputs a tibble object of the rate factor F in population Y, standardised across all populations
#' @param srates a dataframe/tibble object of ?? can't remember!!!
#' @param all_p character or numeric vector of all N populations
#' @param y character of numeric value indicating a single population
#' @param fctr string indicating rate-factor being standardised.
#' @export
#' @examples
#' ......
DG_Npops_std<-function(srates,all_p,y,fctr){
print(y)
#this could be done somewhere else maybe.. not sure.
all_p %>% combinat::combn(.,2) %>% as_tibble(.,.name_repair="universal") -> pwise
pwise[c(2,1),] %>% map_chr(.,~paste(.,collapse="vs")) %>% paste(.,collapse="|") -> unique_comparisons
srates<-srates[,grepl(unique_comparisons,names(srates))]
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
) %>%
map(.,~mutate_at(.,vars(matches(y)),~(-(length(all_p)-2)*.x))) %>%
map(.,rowSums,na.rm=T) %>% as_tibble(.,.name_repair="universal") %>%
mutate(
sum2=rowSums(.,na.rm=T)/(length(all_p)*(length(all_p)-1)),
sum1=rowSums(srates[,grepl(paste0(fctr,".pop",y),names(srates))],na.rm=T)/(length(all_p)-1),
!!(paste0("pop",y)):=sum1+sum2
) %>% dplyr::select(!!paste0("pop",y))
}
dd<-DasGupt_Npop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex),ratefunction="prevalence*pop_str")
head(reconv)
d<-reconv %>% mutate(prevalence=reconvicted/offenders,pop_str=offenders/convicted_populatoin)
d<-reconv %>% mutate(prevalence=reconvicted/offenders,pop_str=offenders/convicted_population)
dd<-DasGupt_Npop(d,pop=year,prevalence,pop_str,id_vars=c(Age,Sex),ratefunction="prevalence*pop_str")
d
dd %>% unlist(recursive = F) %>% as_tibble(.name_repair = "universal") %>%
select(contains(f),-contains("factor")) -> dg2p_rates
dd %>% unlist(recursive = F) %>% as_tibble(.name_repair = "universal") %>%
select(contains("prevalence"),-contains("factor")) -> dg2p_rates
dd %>% unlist(recursive = F) %>% as_tibble(.name_repair = "universal") %>%
select(contains(paste0("prevalence",".factor"))) -> dg2p_facteffs
dg2p_rates
all_p=2004:2006
y=2004
srates=dg2p_rates
fctr="prevalence"
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
)
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
) %>%
map(.,~mutate_at(.,vars(matches(y)),~(-(length(all_p)-2)*.x))) %>%
map(.,rowSums,na.rm=T)
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
) %>%
map(.,~mutate_at(.,vars(matches(y)),~(-(length(all_p)-2)*.x)))
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
)
all_p %>% combinat::combn(.,2) %>% as_tibble(.,.name_repair="universal") -> pwise
pwise[c(2,1),] %>% map_chr(.,~paste(.,collapse="vs")) %>% paste(.,collapse="|") -> unique_comparisons
srates<-srates[,grepl(unique_comparisons,names(srates))]
all_p %>% combinat::combn(.,2)
all_p %>% combinat::combn(.,2) %>% as_tibble(.,.name_repair="universal")
all_p %>% combinat::combn(.,2) %>% bind_cols
#this could be done somewhere else maybe.. not sure.
all_p %>% combinat::combn(.,2) -> pwise
pwise[c(2,1),] %>% map_chr(.,~paste(.,collapse="vs")) %>% paste(.,collapse="|")
#this could be done somewhere else maybe.. not sure.
all_p %>% combinat::combn(.,2) %>% as_tibble(.,.name_repair="universal") -> pwise
pwise[c(2,1),] %>% map_chr(.,~paste(.,collapse="vs")) %>% paste(.,collapse="|")
tibble(all_p %>% combinat::combn(.,2))
all_p %>% combinat::combn(.,2) %>% as.data.frame
all_p %>% combinat::combn(.,2) %>% as.data.frame -> pwise
pwise[c(2,1),] %>% map_chr(.,~paste(.,collapse="vs")) %>% paste(.,collapse="|")
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
) %>%
map(.,~mutate_at(.,vars(matches(y)),~(-(length(all_p)-2)*.x))) %>%
map(.,rowSums,na.rm=T)
y
y="2004"
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
) %>%
map(.,~mutate_at(.,vars(matches(y)),~(-(length(all_p)-2)*.x)))
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
) %>%
map(.,~mutate_at(.,vars(matches(y)),~(-(length(all_p)-2)*.x))) %>%
map(.,rowSums,na.rm=T)
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
) %>%
map(.,~mutate_at(.,vars(matches(y)),~(-(length(all_p)-2)*.x))) %>%
map(.,rowSums,na.rm=T) %>% as_tibble(.,.name_repair="universal")
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
) %>%
map(.,~mutate_at(.,vars(matches(y)),~(-(length(all_p)-2)*.x))) %>%
map(.,rowSums,na.rm=T)
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
) %>%
map(.,~mutate_at(.,vars(matches(y)),~(-(length(all_p)-2)*.x))) %>%
map_dfc(.,rowSums,na.rm=T)
map(all_p[!(all_p %in% y)],
~srates[,grepl(paste0(fctr,".pop",.x),names(srates))]
) %>%
map(.,~mutate_at(.,vars(matches(y)),~(-(length(all_p)-2)*.x))) %>%
map(.,rowSums,na.rm=T) %>% as_tibble(.,.name_repair="universal")
map(list.files("R",full.names=T),source)
reconv<-filter(reconv,year<2007)
tibble(
sampledata = map(1:bs_r, ~map_dfr(unique(reconv$year),~filter(reconv,year==.x) %>% Bs_samps %>% mutate(year=.x))),
dg = map(sampledata, ~DasGupt_Npop(.,pop=year,prevalence,pop_str,id_vars=c(Age,Sex),ratefunction="prevalence*pop_str"))
)
require(tidyverse)
data(reconv)
head(reconv)
Bs_samps<-function(x){
#get 1 year
df = x %>% mutate(nreconv = offenders-reconvicted)
#original data, in long form
odata<-
tibble(
Sex=c(rep(df$Sex,df$reconvicted),rep(df$Sex,df$nreconv)),
Age=c(rep(df$Age,df$reconvicted),rep(df$Age,df$nreconv)),
reconv=c(rep(1,sum(df$reconvicted)),rep(0,sum(df$nreconv)))
)
#sample function
samp <- odata[sample(1:nrow(odata),replace=T),] %>%
group_by(Sex,Age) %>%
summarise(
reconvicted=sum(reconv),
offenders=n()
) %>% ungroup %>%
mutate(
prevalence = reconvicted/offenders,
convicted_population = sum(offenders),
pop_str = offenders/convicted_population
)
samp
}
#one BS
map_dfr(unique(reconv$year),~filter(reconv,year==.x) %>% Bs_samps %>% mutate(year=.x))
#set R
bs_r = 2
map(list.files("R",full.names=T),source)
reconv<-filter(reconv,year<2007)
tibble(
sampledata = map(1:bs_r, ~map_dfr(unique(reconv$year),~filter(reconv,year==.x) %>% Bs_samps %>% mutate(year=.x))),
dg = map(sampledata, ~DasGupt_Npop(.,pop=year,prevalence,pop_str,id_vars=c(Age,Sex),ratefunction="prevalence*pop_str"))
)
map(list.files("R",full.names=T),source)
reconv<-filter(reconv,year<2007)
tibble(
sampledata = map(1:bs_r, ~map_dfr(unique(reconv$year),~filter(reconv,year==.x) %>% Bs_samps %>% mutate(year=.x))),
dg = map(sampledata, ~DasGupt_Npop(.,pop=year,prevalence,pop_str,id_vars=c(Age,Sex),ratefunction="prevalence*pop_str"))
)
map(list.files("R",full.names=T),source)
tibble(
sampledata = map(1:bs_r, ~map_dfr(unique(reconv$year),~filter(reconv,year==.x) %>% Bs_samps %>% mutate(year=.x))),
dg = map(sampledata, ~DasGupt_Npop(.,pop=year,prevalence,pop_str,id_vars=c(Age,Sex),ratefunction="prevalence*pop_str"))
)
map(list.files("R",full.names=T),source)
tibble(
sampledata = map(1:bs_r, ~map_dfr(unique(reconv$year),~filter(reconv,year==.x) %>% Bs_samps %>% mutate(year=.x))),
dg = map(sampledata, ~DasGupt_Npop(.,pop=year,prevalence,pop_str,id_vars=c(Age,Sex),ratefunction="prevalence*pop_str"))
)
e
map(list.files("R",full.names=T),source)
#set R
bs_r = 50
map(list.files("R",full.names=T),source)
require(tidyverse)
#require(DasGuptR)
data(reconv)
head(reconv)
Bs_samps<-function(x){
#get 1 year
df = x %>% mutate(nreconv = offenders-reconvicted)
#original data, in long form
odata<-
tibble(
Sex=c(rep(df$Sex,df$reconvicted),rep(df$Sex,df$nreconv)),
Age=c(rep(df$Age,df$reconvicted),rep(df$Age,df$nreconv)),
reconv=c(rep(1,sum(df$reconvicted)),rep(0,sum(df$nreconv)))
)
#sample function
samp <- odata[sample(1:nrow(odata),replace=T),] %>%
group_by(Sex,Age) %>%
summarise(
reconvicted=sum(reconv),
offenders=n()
) %>% ungroup %>%
mutate(
prevalence = reconvicted/offenders,
convicted_population = sum(offenders),
pop_str = offenders/convicted_population
)
samp
}
#one BS
map_dfr(unique(reconv$year),~filter(reconv,year==.x) %>% Bs_samps %>% mutate(year=.x))
#set R
bs_r = 50
map(list.files("R",full.names=T),source)
#create bootstrapping samples (takes ages!)
#13 years, 10 subgroups, takes approx 5mins for a bootstrap of R=10 (see Wang, Rahman, Siegal and Fisher 2000.)
system.time(
bs_ALLsamples <-
tibble(
sampledata = map(1:bs_r, ~map_dfr(unique(reconv$year),~filter(reconv,year==.x) %>% Bs_samps %>% mutate(year=.x))),
dg = map(sampledata, ~DasGupt_Npop(.,pop=year,prevalence,pop_str,id_vars=c(Age,Sex),ratefunction="prevalence*pop_str"))
)
)
1620/60
bs_ALLsamples
#pull the rates for each sample,
rateSD <-
bs_ALLsamples %>%
mutate(
pops=map(dg, DasGupt_rates) #this function extracts the rates from the DasGupt_Npop() output
) %>% pull(pops) %>%
bind_rows() %>%
group_by(factor,population) %>%
summarise(sdrate=sd(rates))
rateSD <-
bs_ALLsamples %>%
mutate(
pops=map(dg, DasGupt_rates) #this function extracts the rates from the DasGupt_Npop() output
)
rateSD
bs_ALLsamples %>%
mutate(
pops=map(dg, DasGupt_rates) #this function extracts the rates from the DasGupt_Npop() output
) %>% pull(pops)
#pull the rates for each sample,
rateSD <-
bs_ALLsamples %>%
mutate(
pops=map(dg, DasGupt_rates) #this function extracts the rates from the DasGupt_Npop() output
) %>% pull(pops) %>%
bind_rows() %>%
group_by(factor,population) %>%
summarise(sdrate=sd(rate))
rateSD
bs_diffs <- function(x){
x %>% group_by(factor) %>%
summarise_at(vars(starts_with("diff")),sum) %>% gather(diff,effect,starts_with("diff"))
}
bs_ALLsamples %>%
mutate(
diffs=map(dg, bs_diffs)
) %>% pull(diffs) %>%
bind_rows()
bs_ALLsamples %>%
mutate(
diffs=map(dg, bs_diffs)
) %>% pull(diffs) %>%
bind_rows() -> diffs
qqnorm(diffs$diff)
?qqnorm
qqnorm(diffs$diff[diffs$factor=="prevalence"])
diffs$diff[diffs$factor=="prevalence"]
diffs
qqnorm(diffs$effect[diffs$factor=="prevalence"])
qqnorm(diffs$effect[diffs$factor=="prevalence" & diffs$diff=="diff2004_2004"])
diffs$effect[diffs$factor=="prevalence" & diffs$diff=="diff2004_2004"]
qqnorm(diffs$effect[diffs$factor=="prevalence" & diffs$diff=="diff2004_2005"])
qqnorm(diffs$effect[diffs$factor=="prevalence"])
DasGupt_Npop(reconv,pop=year,prevalence,pop_str,id_vars=c(Age,Sex),ratefunction="prevalence*pop_str")
reconv %>%
mutate(prevalence=reconvicted/offenders, pop_str=offenders/convicted_population) %>%
DasGupt_Npop(.,pop=year,prevalence,pop_str,id_vars=c(Age,Sex),ratefunction="prevalence*pop_str") -> DGreconv
DGreconv
DasGupt_rates(DGreconv)
rateSD
rateSD %>% rename(year=population)
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD %>% rename(year=population)
)
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD %>% rename(year=population)
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
)
saveRDS(bs_ALLsamples, "archive/bootstrappedr50.RDS")
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD %>% rename(year=population)
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
)
DasGupt_rates(DGreconv)
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
)
crude_rates <-
reconv %>%
mutate(rate=prevalence*pop_str) %>%
group_by(year) %>%
summarise(
rate=sum(rate),
factor="crude"
) %>% rename(population=year)
crude_rates <-
reconv %>% mutate(prevalence=reconvicted/offenders, pop_str=offenders/convicted_population) %>%
mutate(rate=prevalence*pop_str) %>%
group_by(year) %>%
summarise(
rate=sum(rate),
factor="crude"
) %>% rename(population=year)
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=year,y=rate,col=factor))+geom_path()+theme_bw()+
ylim(.3,.35)
crude_rates <-
reconv %>% mutate(prevalence=reconvicted/offenders, pop_str=offenders/convicted_population) %>%
mutate(rate=prevalence*pop_str) %>%
group_by(year) %>%
summarise(
rate=sum(rate),
factor="crude"
) %>% mutate(population=as.character(year)) %>% select(-year)
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=year,y=rate,col=factor))+geom_path()+theme_bw()+
ylim(.3,.35)
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor))+geom_path()+theme_bw()+
ylim(.3,.35)
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates)
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor))
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor))+geom_path()
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor,group=factor))+geom_path()+theme_bw()+
#
bs_diffs <- function(x){
x %>% group_by(factor) %>%
summarise_at(vars(starts_with("diff")),sum) %>% gather(diff,effect,starts_with("diff"))
}
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor,group=factor))+geom_path()+theme_bw()+
#
bs_diffs <- function(x){
x %>% group_by(factor) %>%
summarise_at(vars(starts_with("diff")),sum) %>% gather(diff,effect,starts_with("diff"))
}
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor,group=factor))+geom_path()+theme_bw()
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor,group=factor))+
geom_path()+
geom_ribbon(aes(ymin=low,ymax=high))+
theme_bw()
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor,group=factor))+
geom_path()+
geom_ribbon(aes(ymin=low,ymax=high,fill=factor))+
theme_bw()
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor,group=factor))+
geom_path()+
geom_ribbon(aes(ymin=low,ymax=high,fill=factor),alpha=.2)+
theme_bw()
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor,group=factor))+
geom_path()+
geom_ribbon(aes(ymin=low,ymax=high,fill=factor,col=NA),alpha=.2)+
theme_bw()
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor,group=factor))+
geom_path()+
geom_ribbon(aes(ymin=low,ymax=high,fill=factor),col=NA,alpha=.2)+
theme_bw()
DasGupt_rates(DGreconv) %>%
left_join(.,
rateSD
) %>%
mutate(low=rate-(1.96*sdrate),
high=rate+(1.96*sdrate)
) %>%
bind_rows(., crude_rates) %>%
ggplot(.,aes(x=population,y=rate,col=factor,group=factor))+
geom_path()+
geom_ribbon(aes(ymin=low,ymax=high,fill=factor),col=NA,alpha=.2)+
theme_bw()+
scale_color_manual(values = c("black","#1b9e77","#d95f02"))+
scale_fill_manual(values = c("black","#1b9e77","#d95f02"))+
NULL
require(roxygen2)
require(devtools)
document()
