allperms$f_id<-paste0("f",1:nrow(allperms))
#these are the parts of the DG 3.54 equation (page 32)
eq_parts <- allperms %>% group_by(c1s) %>%
summarise(
n=n(),
F_eqs=list(f_id)
) %>% ungroup
eq_parts
map_dbl(1:nrow(eq_parts)-1,~nfact*(ncol(combn(nfact-1,.))))
#these are the denominators for each part
denominators = map_dbl(1:nrow(eq_parts)-1,~nfact*(ncol(combn(nfact-1,.))))
DG_reconv$diff2004_2005
DG_reconvNEW$diff2004_2005
#extract all the data for each F() calculation
#one is for when alpha is from pop1, and one when alpha is from pop2
allperms <- allperms %>% as_tibble %>%
mutate(
data=map(1:nrow(allperms),~pop_facts[allfacts[allfacts %in% c(facti,allperms[.,1:((length(allfacts)/2)-1)])]]),
data1=map(1:nrow(allperms),~pop_facts[allfacts[allfacts %in% c(paste0(facti,1),allperms[.,1:((length(allfacts)/2)-1)])]])
)
#this is to clean up the 1s. Again, this aspect could be a lot better...
colClean <- function(x){ colnames(x) <- gsub("1", "", colnames(x)); x }
#Now we map the rate function (user defined) onto the data.
allperms %>% mutate(
data_rn = map(data,colClean),
rfunct = map(data_rn,~mutate(.,rf=eval(parse(text=ratefunction))) %>% pull(rf)),
data1_rn = map(data1,colClean),
rfunct1 = map(data1_rn,~mutate(.,rf=eval(parse(text=ratefunction))) %>% pull(rf))
) %>% select(-c(data,data_rn,cMs,data1,data1_rn)) -> allperms
ratefunction="prevalence*frequency*age_str"
#Now we map the rate function (user defined) onto the data.
allperms %>% mutate(
data_rn = map(data,colClean),
rfunct = map(data_rn,~mutate(.,rf=eval(parse(text=ratefunction))) %>% pull(rf)),
data1_rn = map(data1,colClean),
rfunct1 = map(data1_rn,~mutate(.,rf=eval(parse(text=ratefunction))) %>% pull(rf))
) %>% select(-c(data,data_rn,cMs,data1,data1_rn)) -> allperms
#spread, unnest
feq_data = allperms %>% select(f_id, rfunct) %>% spread(f_id,rfunct) %>% unnest
feq_data1 = allperms %>% select(f_id, rfunct1) %>% spread(f_id,rfunct1) %>% unnest
eq_parts %>%
mutate(
top_part = map(F_eqs, ~select(feq_data,.) %>% rowSums),
top_part1 = map(F_eqs, ~select(feq_data1,.) %>% rowSums),
bottom_part = denominators,
eq = map2(top_part,bottom_part,~(.x/.y)),
eq1 = map2(top_part1,bottom_part,~(.x/.y))
) -> eq_parts
eq_parts %>% select(eq1) %>% unlist(recursive = F) %>% as_tibble() %>% rowSums
eq_parts %>% select(eq) %>% unlist(recursive = F) %>% as_tibble() %>% rowSums
pop1-pop2
pop1=eq_parts %>% select(eq1) %>% unlist(recursive = F) %>% as_tibble() %>% rowSums
pop2=eq_parts %>% select(eq) %>% unlist(recursive = F) %>% as_tibble() %>% rowSums
diff=pop1-pop2
diff
lapply(list.files("R/",full.names = T),source)
load("data/reconv.RData")
DG_reconv <- DasGupt_Npop(reconv,
pop=year,
prevalence, age_str, frequency,
id_vars=c(Age,Gender),
#                 ratefunction="prevalence*frequency+age_str"
)
DG_reconvNEW <- DasGupt_Npop(reconv,
pop=year,
prevalence, age_str, frequency,
id_vars=c(Age,Gender),
ratefunction="prevalence*frequency+age_str"
)
DG_reconv$diff2004_2005
DG_reconvNEW$diff2004_2005
DG_reconv$pop2004
DG_reconvNEW$pop2004
reconv %>% filter(year %in% c(2005,2006)) %>% group_by(year) %>%
nest() %>%
mutate(
factor_df = map(data, magrittr::extract,factrs)
) -> df_nested
#rda<-reconv %>% filter(year %in% c(2005,2006))
factrs=c("prevalence","age_str","frequency")
reconv %>% filter(year %in% c(2005,2006)) %>% group_by(year) %>%
nest() %>%
mutate(
factor_df = map(data, magrittr::extract,factrs)
) -> df_nested
DGadjust_ratefactor2(df_nested,pop=year,1,factrs)
DGadjust_ratefactor2(df_nested,pop=year,1,factrs,"prevalence*age_str*frequency")
DGadjust_ratefactor(df_nested,pop=year,1,factrs)
DG_reconvNEW$diff2004_2005
DG_reconvNEW$pop2004
DG_reconv$pop2004
DG_reconvNEW$pop2004
reconv %>% filter(year %in% c(2005,2006)) %>% group_by(year) %>%
nest() %>%
mutate(
factor_df = map(data, magrittr::extract,factrs)
) -> df_nested
DGadjust_ratefactor2(df_nested,pop=year,1,factrs,"prevalence*age_str*frequency")
lapply(list.files("R/",full.names = T),source)
load("data/reconv.RData")
DG_reconvNEW <- DasGupt_Npop(reconv,
pop=year,
prevalence, age_str, frequency,
id_vars=c(Age,Gender),
ratefunction="prevalence*frequency+age_str"
)
DG_reconvNEW$diff2004_2005
DGadjust_ratefactor2(df_nested,pop=year,1,factrs,"prevalence*age_str*frequency") %>% class
#rda<-reconv %>% filter(year %in% c(2005,2006))
factrs=c("prevalence","age_str","frequency")
reconv %>% filter(year %in% c(2005,2006)) %>% group_by(year) %>%
nest() %>%
mutate(
factor_df = map(data, magrittr::extract,factrs)
) -> df_nested
DGadjust_ratefactor2(df_nested,pop=year,1,factrs,"prevalence*age_str*frequency") %>% str
DGadjust_ratefactor(df_nested,pop=year,1,factrs) %>% str
reconv %>% filter(year %in% c(2004,2005)) %>% group_by(year) %>%
nest() %>%
mutate(
factor_df = map(data, magrittr::extract,factrs)
) -> df_nested
DGadjust_ratefactor2(df_nested,pop=year,1,factrs,"prevalence*age_str*frequency") %>% str
DGadjust_ratefactor(df_nested,pop=year,1,factrs) %>% str
reconv %>% filter(year %in% c(2004,2005)) %>% DasGupt_Npop(.,pop=year,age_str,prevalence,frequency,id_vars=c(Age,Gender))
reconv %>% filter(year %in% c(2004,2005)) %>% DasGupt_Npop(.,pop=year,age_str,prevalence,frequency,id_vars=c(Age,Gender),
ratefunction="prevalence*frequency*age_str")
DGadjust_ratefactor2(df_nested,pop=year,1,factrs,"prevalence*age_str*frequency") %>% str
DGadjust_ratefactor(df_nested,pop=year,1,factrs) %>% str
reconv %>% filter(year %in% c(2004,2005)) %>% DasGupt_Npop(.,pop=year,age_str,prevalence,frequency,id_vars=c(Age,Gender),
ratefunction="prevalence*frequency*age_str")
reconv %>%
mutate(
factfour=jitter(num_offenders/num_reconvicted),
factfive=jitter(ARpO*age_str)
) -> fdat
#rda<-reconv %>% filter(year %in% c(2005,2006))
factrs=c("prevalence","age_str","frequency","factfour","factfivew")
fdat %>% filter(year %in% c(2004,2005))
fdat %>% filter(year %in% c(2004,2005)) -> fdat
reconv %>%
mutate(
factfour=jitter(num_offenders/num_reconvicted),
factfive=jitter(ARpO*age_str)
) -> fdat
fdat %>% filter(year %in% c(2004,2005)) %>% DasGupt_Npop(.,pop=year,age_str,prevalence,frequency,factfour,factfive,id_vars=c(Age,Gender))
fdat %>% filter(year %in% c(2004,2005)) %>%
DasGupt_Npop(.,pop=year,age_str,prevalence,frequency,factfour,factfive,
id_vars=c(Age,Gender),
ratefunction="prevalence*frequency*age_str*factfour*factfive"
)
#rda<-reconv %>% filter(year %in% c(2005,2006))
factrs=c("prevalence","age_str","frequency","factfour","factfivew")
fdat %>% filter(year %in% c(2004,2005)) %>% group_by(year) %>%
nest() %>%
mutate(
factor_df = map(data, magrittr::extract,factrs)
) -> df_nested
DGadjust_ratefactor2(df_nested,pop=year,1,factrs,"prevalence*age_str*frequency*factfour*factfive") %>% str
fdat %>% filter(year %in% c(2004,2005)) %>% group_by(year) %>%
nest() %>%
mutate(
factor_df = map(data, magrittr::extract,factrs)
) -> df_nested
#rda<-reconv %>% filter(year %in% c(2005,2006))
factrs=c("prevalence","age_str","frequency","factfour","factfive")
fdat %>% filter(year %in% c(2004,2005)) %>% group_by(year) %>%
nest() %>%
mutate(
factor_df = map(data, magrittr::extract,factrs)
) -> df_nested
DGadjust_ratefactor2(df_nested,pop=year,1,factrs,"prevalence*age_str*frequency*factfour*factfive") %>% str
DGadjust_ratefactor(df_nested,pop=year,1,factrs) %>% str
allfacts=letters[1:5]
allfacts=c(letters[1:5],paste0(letters[1:5],"1"))
#these are the all the combinations of P-1 factors from 2 populations
allperms<-combn(allfacts[!(allfacts %in% c(facti,paste0(facti,1)))],length(allfacts)/2-1) %>% t %>% as_tibble()
facti=a
facti="a"
#these are the all the combinations of P-1 factors from 2 populations
allperms<-combn(allfacts[!(allfacts %in% c(facti,paste0(facti,1)))],length(allfacts)/2-1) %>% t %>% as_tibble()
#because we need to distinguish between sets by how many are from pop1 and how many from pop2, we'll count the 1s and absence of 1s
# we also need to remove any sets in which factors come up twice (e.g. age_str and age_str1)
count1s <- apply(allperms, 1, function(x) length(which(grepl("1",x))))
count0s <- apply(allperms, 1, function(x) length(which(!grepl("1",x))))
count1s
ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,
ifelse(count1s==ceiling(nfact/2) | count1s==floor(nfact/2),floor(nfact/2),count1s))
nfact=5
ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,
ifelse(count1s==ceiling(nfact/2) | count1s==floor(nfact/2),floor(nfact/2),count1s))
ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,
ifelse(count1s>=ceiling(nfact/2) | count1s==floor(nfact/2),floor(nfact/2),count1s))
count0s
count1s
allperms %>% mutate(
c1s=ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,count1s),
eqp=ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,
ifelse(count1s>=ceiling(nfact/2) | count1s==floor(nfact/2),floor(nfact/2),count1s)),
cMs=countmult
) %>% filter(cMs==0)
countmult <- apply(map_df(allperms,~gsub("1","",.)), 1, function(x) sum(duplicated(x)|duplicated(x, fromLast = TRUE)))
allperms %>% mutate(
c1s=ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,count1s),
eqp=ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,
ifelse(count1s>=ceiling(nfact/2) | count1s==floor(nfact/2),floor(nfact/2),count1s)),
cMs=countmult
) %>% filter(cMs==0)
lapply(list.files("R/",full.names = T),source)
load("data/reconv.RData")
DG_reconvNEW <- DasGupt_Npop(reconv,
pop=year,
prevalence, age_str, frequency,
id_vars=c(Age,Gender),
ratefunction="prevalence*frequency*age_str"
)
require(tidyverse)
DG_reconvNEW <- DasGupt_Npop(reconv,
pop=year,
prevalence, age_str, frequency,
id_vars=c(Age,Gender),
ratefunction="prevalence*frequency*age_str"
)
lapply(list.files("R/",full.names = T),source)
DG_reconvNEW <- DasGupt_Npop(reconv,
pop=year,
prevalence, age_str, frequency,
id_vars=c(Age,Gender),
ratefunction="prevalence*frequency*age_str"
)
DG_reconv <- DasGupt_Npop(reconv,
pop=year,
prevalence, age_str, frequency,
id_vars=c(Age,Gender),
#ratefunction="prevalence*frequency*age_str"
)
DG_reconv$diff2004_2005
DG_reconvNEW$diff2004_2005
DG_reconv$pop2004
DG_reconvNEW$pop2004
reconv %>%
mutate(
factfour=jitter(num_offenders/num_reconvicted),
factfive=jitter(ARpO*age_str)
) -> fdat
DG_reconvNEW <- DasGupt_Npop(fdat,
pop=year,
prevalence, age_str, frequency,factfour,factfive,
id_vars=c(Age,Gender),
ratefunction="prevalence*frequency*age_str*factfour*factfive"
)
DG_reconv <- DasGupt_Npop(fdat,
pop=year,
prevalence, age_str, frequency,factfour,factfive
id_vars=c(Age,Gender),
#ratefunction="prevalence*frequency*age_str"
)
DG_reconv$diff2004_2005
DG_reconvNEW$diff2004_2005
DG_reconv$pop2004
DG_reconvNEW$pop2004
#' Inner function called by DasGupt_2pop and DasGupt_Npop
#' Outputs a ? object
#' @param df dataframe in which rows are populations, column 'factor_df' is a nested dataframe of rate-factors, and column 'pop_prods' is the rowProducts of 'factor_df'.
#' @param pop tidyselect variable indicating population ID
#' @param factrs character vector of rate-factors
#' @export
#' @examples
#' ......
allfacts=c(letters[1:5],paste0(letters[1:5],1))
facti="a"
nfact=5
allperms<-combn(allfacts[!(allfacts %in% c(facti,paste0(facti,1)))],length(allfacts)/2-1) %>% t %>% as_tibble()
#because we need to distinguish between sets by how many are from pop1 and how many from pop2, we'll count the 1s and absence of 1s
# we also need to remove any sets in which factors come up twice (e.g. age_str and age_str1)
count1s <- apply(allperms, 1, function(x) length(which(grepl("1",x))))
count0s <- apply(allperms, 1, function(x) length(which(!grepl("1",x))))
countmult <- apply(map_df(allperms,~gsub("1","",.)), 1, function(x) sum(duplicated(x)|duplicated(x, fromLast = TRUE)))
allperms
allperms %>% mutate(
c1s=ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,count1s),
eqp=ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,
ifelse(count1s>=ceiling(nfact/2) | count1s==floor(nfact/2),floor(nfact/2),count1s)),
cMs=countmult
) %>% filter(cMs==0) -> allperms
allperms
#make an id for each
allperms$f_id<-paste0("f",1:nrow(allperms))
#these are the parts of the DG 3.54 equation (page 32)
eq_parts <- allperms %>% group_by(c1s) %>%
summarise(
n=n(),
F_eqs=list(f_id)
) %>% ungroup
map_dbl(1:nrow(eq_parts)-1,~nfact*(ncol(combn(nfact-1,.))))
1:floor(nfact/2)
0:floor(nfact/2)
map(0:floor(nfact/2),~ifelse(count0s==.|count1s==.,.))
map(0:floor(nfact/2),~ifelse(count0s==.|count1s==.,.),NA)
map(0:floor(nfact/2),~ifelse(count0s==.|count1s==.,.,NA))
map_dbl(0:floor(nfact/2),~ifelse(count0s==.|count1s==.,.,NA))
map(0:floor(nfact/2),~ifelse(count0s==.|count1s==.,.,NA)) %>% as_tibble()
map(0:floor(nfact/2),~ifelse(count0s==.|count1s==.,.,NA)) %>% as_tibble(.name_repair="minimal")
map_dfc(0:floor(nfact/2),~ifelse(count0s==.|count1s==.,.,0))
map_dfc(0:floor(nfact/2),~ifelse(count0s==.|count1s==.,.,0)) %>% rowSums
#these are the all the combinations of P-1 factors from 2 populations
allperms<-combn(allfacts[!(allfacts %in% c(facti,paste0(facti,1)))],length(allfacts)/2-1) %>% t %>% as_tibble()
#because we need to distinguish between sets by how many are from pop1 and how many from pop2, we'll count the 1s and absence of 1s
# we also need to remove any sets in which factors come up twice (e.g. age_str and age_str1)
count1s <- apply(allperms, 1, function(x) length(which(grepl("1",x))))
count0s <- apply(allperms, 1, function(x) length(which(!grepl("1",x))))
countmult <- apply(map_df(allperms,~gsub("1","",.)), 1, function(x) sum(duplicated(x)|duplicated(x, fromLast = TRUE)))
allperms %>% mutate(
c0s=ifelse(count0s %in% c(0,(length(allfacts)/2-1)),0,count0s),
c1s=ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,count1s),
eqp=ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,
ifelse(count1s>=ceiling(nfact/2) | count1s==floor(nfact/2),floor(nfact/2),count1s)),
eqp2=map_dfc(0:floor(nfact/2),~ifelse(count0s==.|count1s==.,.,0)) %>% rowSums,
cMs=countmult
) %>% filter(cMs==0) -> allperms
#make an id for each
allperms$f_id<-paste0("f",1:nrow(allperms))
#these are the parts of the DG 3.54 equation (page 32)
eq_parts <- allperms %>% group_by(c1s) %>%
summarise(
n=n(),
F_eqs=list(f_id)
) %>% ungroup
allperms
lapply(list.files("R/",full.names = T),source)
DG_reconvNEW <- DasGupt_Npop(fdat,
pop=year,
prevalence, age_str, frequency,factfour,factfive,
id_vars=c(Age,Gender),
ratefunction="prevalence*frequency*age_str*factfour*factfive"
)
DG_reconvNEW <- DasGupt_Npop(fdat,
pop=year,
prevalence, age_str, frequency,factfour,factfive,
id_vars=c(Age,Gender),
ratefunction="prevalence*frequency*age_str*factfour*factfive"
)
DG_reconv$diff2004_2005
DG_reconvNEW$diff2004_2005
#' Inner function called by DasGupt_2pop and DasGupt_Npop
#' Outputs a ? object
#' @param df dataframe in which rows are populations, column 'factor_df' is a nested dataframe of rate-factors, and column 'pop_prods' is the rowProducts of 'factor_df'.
#' @param pop tidyselect variable indicating population ID
#' @param factrs character vector of rate-factors
#' @export
#' @examples
#' ......
allfacts=c(letters[1:5],paste0(letters[1:5],1))
facti="a"
nfact=5
#these are the all the combinations of P-1 factors from 2 populations
allperms<-combn(allfacts[!(allfacts %in% c(facti,paste0(facti,1)))],length(allfacts)/2-1) %>% t %>% as_tibble()
#because we need to distinguish between sets by how many are from pop1 and how many from pop2, we'll count the 1s and absence of 1s
# we also need to remove any sets in which factors come up twice (e.g. age_str and age_str1)
count1s <- apply(allperms, 1, function(x) length(which(grepl("1",x))))
count0s <- apply(allperms, 1, function(x) length(which(!grepl("1",x))))
countmult <- apply(map_df(allperms,~gsub("1","",.)), 1, function(x) sum(duplicated(x)|duplicated(x, fromLast = TRUE)))
allperms %>% mutate(
#c0s=ifelse(count0s %in% c(0,(length(allfacts)/2-1)),0,count0s),
#c1s=ifelse(count1s %in% c(0,(length(allfacts)/2-1)),0,count1s),
eqp=map_dfc(0:floor(nfact/2),~ifelse(count0s==.|count1s==.,.,0)) %>% rowSums,
cMs=countmult
) %>% filter(cMs==0) -> allperms
#make an id for each
allperms$f_id<-paste0("f",1:nrow(allperms))
#these are the parts of the DG 3.54 equation (page 32)
eq_parts <- allperms %>% group_by(eqp) %>%
summarise(
n=n(),
F_eqs=list(f_id)
) %>% ungroup
eq_parts
map_dbl(1:nrow(eq_parts)-1,~nfact*(ncol(combn(nfact-1,.))))
#rda<-reconv %>% filter(year %in% c(2005,2006))
factrs=c("prevalence","age_str","frequency","factfour","factfive")
fdat %>% filter(year %in% c(2004,2005)) %>%
DasGupt_Npop(.,pop=year,age_str,prevalence,frequency,factfour,factfive,
id_vars=c(Age,Gender),
ratefunction="prevalence*frequency*age_str*factfour*factfive"
)
fdat %>% filter(year %in% c(2004,2005)) %>%
DasGupt_Npop(.,pop=year,age_str,prevalence,frequency,factfour,factfive,
id_vars=c(Age,Gender),
#ratefunction="prevalence*frequency*age_str*factfour*factfive"
)
?spread
fdat %>% filter(year %in% c(2004,2005)) %>% group_by(year) %>%
nest() %>%
mutate(
factor_df = map(data, magrittr::extract,factrs)
) -> df_nested
df2<-df_nested
df2 %>% dplyr::select(year,factor_df) %>% spread(year,factor_df) %>% unnest()
df2 %>% dplyr::select(year,factor_df) %>% spread(year,factor_df,sep="pop") %>% unnest()
df2 %>% dplyr::select(year,factor_df) %>% spread(year,factor_df) %>% unnest()
df2 %>% dplyr::select(year,factor_df) %>% spread(year,factor_df)
?unnest
df2 %>% dplyr::select(year,factor_df) %>% spread(year,factor_df) %>% unnest(.id=names(.))
df2 %>% dplyr::select(year,factor_df) %>% spread(year,factor_df) %>% unnest(.id=c(0,1)
)
df2 %>% dplyr::select(year,factor_df) %>% spread(year,factor_df) %>% unnest(.id=letters)
df2 %>% dplyr::select(year,factor_df) %>% spread(year,factor_df) %>% unnest(.id="name")
df2 %>% dplyr::select(year,factor_df) %>% unnest(.id="name")
df2 %>% dplyr::select(year,factor_df) %>% unnest()
df2 %>% dplyr::select(year,factor_df) %>% unnest() %>% spread(year,prevalence)
df2 %>% dplyr::select(!!pop,factor_df) %>% spread(!!pop,factor_df) %>% unnest()
df2 %>% dplyr::select(year,factor_df) %>% spread(year,factor_df) %>% unnest()
DG_reconv$pop2004
DG_reconvNEW$pop2004
DG_reconv
fdat %>% group_by(year) %>% summarise(
r=prevalence*frequency*age_str*factfour*factfive
)
fdat %>% mutate(
r=prevalence*frequency*age_str*factfour*factfive
)
fdat %>% mutate(
r=prevalence*frequency*age_str*factfour*factfive
) %>% group_by(year) %>% summarise(rr=sum(r))
DG_reconv %>% group_by(year) %>% summarise(sum(diff2004_2005))
DG_reconv
DG_reconv %>% summarise(sum(diff2004_2005))
fdat %>% mutate(
r=prevalence*frequency*age_str*factfour*factfive
) %>% group_by(year) %>% summarise(rr=sum(r))
fdat %>% mutate(
r=prevalence*frequency*age_str*factfour*factfive
) %>% group_by(year) %>% summarise(rr=sum(r),diff=c(0,diff(rr))) %>%
DG_reconv %>% summarise(sum(diff2004_2005))
fdat %>% mutate(
r=prevalence*frequency*age_str*factfour*factfive
) %>% group_by(year) %>% summarise(rr=sum(r),diff=c(0,diff(rr)))
fdat %>% mutate(
r=prevalence*frequency*age_str*factfour*factfive
) %>% group_by(year) %>% summarise(rr=sum(r),
diff=c(0,diff(rr,lag=1)))
fdat %>% mutate(
r=prevalence*frequency*age_str*factfour*factfive
) %>% group_by(year) %>% summarise(rr=sum(r)) %>%
mutate(diff=c(0,diff(rr,lag=1)))
DG_reconv %>% summarise(sum(diff2004_2005))
DG_reconvNEW %>% summarise(sum(diff2004_2005))
fdat %>% mutate(
r=prevalence*frequency*age_str*factfour*factfive
) %>% group_by(year) %>% summarise(rr=sum(r)) %>%
mutate(diff=c(0,diff(rr,lag=1)))
DG_reconv %>% summarise(sum(diff2004_2005))
DG_reconvNEW %>% summarise(sum(diff2004_2005))
DG_reconv %>% summarise(sum(diff2004_2005))/2
DG_reconv %>% summarise(sum(diff2004_2006))
DG_reconvNEW %>% summarise(sum(diff2004_2006))
DG_reconv %>% summarise(sum(diff2014_2015))
DG_reconvNEW %>% summarise(sum(diff2014_2015))
fdat %>% mutate(
r=prevalence*frequency*age_str*factfour*factfive
) %>% group_by(year) %>% summarise(rr=sum(r)) %>%
mutate(diff=c(0,diff(rr,lag=1)))
DG_reconvNEW %>% summarise(sum(diff2014_2015))
paste(factrs,collapse="*")
lapply(list.files("R/",full.names = T),source)
DG_reconv <- DasGupt_Npop(fdat,
pop=year,
prevalence, age_str, frequency,factfour,factfive
id_vars=c(Age,Gender),
#ratefunction="prevalence*frequency*age_str"
)
DG_reconv <- DasGupt_Npop(fdat,
pop=year,
prevalence, age_str, frequency,factfour,factfive
id_vars=c(Age,Gender),
#ratefunction="prevalence*frequency*age_str"
)
DG_reconv <- DasGupt_Npop(fdat,
pop=year,
prevalence, age_str, frequency,factfour,factfive
id_vars=c(Age,Gender),
#ratefunction="prevalence*frequency*age_str"
)
DG_reconv <- DasGupt_Npop(fdat,
pop=year,
prevalence, age_str, frequency,factfour,factfive,
id_vars=c(Age,Gender),
#ratefunction="prevalence*frequency*age_str"
)
lapply(list.files("R/",full.names = T),source)
DG_reconvNEW <- DasGupt_Npop(fdat,
pop=year,
prevalence, age_str,
id_vars=c(Age,Gender),
ratefunction="prevalence*age_str"
)
DG_reconv <- DasGupt_Npop(fdat,
pop=year,
prevalence, age_str,
id_vars=c(Age,Gender),
#ratefunction="prevalence*frequency*age_str"
)
DG_reconv$diff2004_2005
DG_reconvNEW$diff2004_2005
DG_reconv$pop2004
DG_reconvNEW$pop2004
fdat %>% mutate(
r=prevalence*age_str
) %>% group_by(year) %>% summarise(rr=sum(r)) %>%
mutate(diff=c(0,diff(rr,lag=1)))
DG_reconv %>% summarise(sum(diff2014_2015))
DG_reconvNEW %>% summarise(sum(diff2014_2015))
